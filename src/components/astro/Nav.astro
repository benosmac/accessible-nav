---
import type { ComponentProps } from "astro/types";
import NavItem from "@components/astro/NavItem.astro";
type NavItem = ComponentProps<typeof NavItem>;

interface Props {
  items: Array<NavItem>;
}
const { items } = Astro.props;

// A recursive function to get the deepest nested navigation level
// function getNavDepth(itemsArray: Array<NavItem>): number {
//   // Construct new array from children of current items
//   let childItems: Array<any> = itemsArray
//     .filter((item) => (item.children ? true : false))
//     .map((item) => item.children);
//   // keep going til we hit the bottom
//   return Array.isArray(childItems)
//     ? 1 + Math.max(0, ...childItems.map(getNavDepth))
//     : 0;
// }
// // store the value so we can use define:vars to access the value in our CSS
// const navDepth = getNavDepth(items);
---

<button
  id="nav-toggle-open"
  title="Open Menu"
  aria-label="Open Menu"
  aria-controls="nav"
  class="nav-toggle"
  aria-haspopup="true"
>
  Menu
</button>
<div id="nav-container">
  <a
    href="#"
    id="nav-toggle-close"
    title="Close Menu"
    aria-label="Close Menu"
    aria-controls="nav"
    class="nav-toggle"
    data-astro-reload
  >
  </a>
  <nav id="nav">
    <button id="back">Back</button>
    <ul class="nav-list nav-level" transition:name="nav-1">
      {
        items.map((item) => (
          <NavItem
            title={item.title}
            href={item.href}
            children={item.children}
          />
        ))
      }
    </ul>
  </nav>
</div>

<script>
  document.addEventListener("astro:page-load", (event) => {
    setupNavEventHandlers();
  });

  function setupNavEventHandlers() {
    const navContainer = document.querySelector<HTMLElement>("#nav-container");
    const nav = navContainer?.querySelector("#nav");
    const navOpen = document.querySelector<HTMLLinkElement>("#nav-toggle-open");
    const navClose =
      document.querySelector<HTMLLinkElement>("#nav-toggle-close");
    const navItemsWithChildren: NodeListOf<HTMLAnchorElement> =
      document.querySelectorAll("[data-subnav]");
    const backButton = document.querySelector("#back");

    // Add any elements that should be inert when nav is open
    const notNav = document.querySelectorAll("main");

    backButton?.addEventListener("click", closeCurrentSubNav);

    //  Close nav with escape key
    navContainer?.addEventListener("keyup", (event) => {
      if (event.code === "Escape") {
        // console.log(event);
        document.location.hash = "";
        toggleNav(event);
      }
    });

    // Bind toggle function to open and close targets
    navOpen?.addEventListener("click", (event) => {
      toggleNav(event);
    });
    navClose?.addEventListener("click", (event) => {
      toggleNav(event);
    });
    // Bind subnav open/close
    navItemsWithChildren?.forEach((item) => {
      console.log(item);
      item.addEventListener("click", (event) => {
        event.preventDefault;
        openSubNav(item);
      });
    });
    // Opens the subnav for given <a> by setting aria state labels
    function openSubNav(el: HTMLAnchorElement) {
      const subnav = el.parentElement?.querySelector("[data-parent]");
      const prevItem = nav?.querySelector('[aria-selected="true"]');
      prevItem?.removeAttribute("aria-selected");
      // set aria attributes on parent item and subnav
      el.setAttribute("aria-selected", "true");
      subnav?.setAttribute("aria-expanded", "true");
      // focus the close button for easy backwards navigation without tabbing through the list
      subnav?.querySelector("button")?.focus();
    }

    // Closes the subnav by resetting aria state labels
    function closeCurrentSubNav() {
      const currentEl = document.querySelector(
        "[data-subnav][aria-selected='true']"
      );
      if (!currentEl) return;

      const subnav = currentEl.parentElement?.querySelector("[data-parent]");
      const parentTitle =
        currentEl.closest<HTMLElement>("[data-parent]")?.dataset.parent;
      const parentNavItem = nav?.querySelector(`[title=${parentTitle}]`);

      // reset aria attributes on item and subnav
      currentEl.setAttribute("aria-selected", "false");
      subnav?.setAttribute("aria-expanded", "false");
      // If the item is in a nested subnav, re-select the parent nav item
      parentNavItem && parentNavItem.setAttribute("aria-selected", "true");
      // focus the closed element so it can be reopened easily
      // depending on the structure of your menu, it may make sense to focus a different element.
      currentEl instanceof HTMLAnchorElement && currentEl.focus();
    }

    function toggleNav(event: Event) {
      event.preventDefault;
      const isNavOpen = nav?.ariaExpanded;
      if (isNavOpen === "false" || isNavOpen === null) {
        // Set aria states
        nav?.setAttribute("aria-expanded", "true");
        nav?.setAttribute("aria-hidden", "false");
        // Set inert attribute on other elements while nav is open
        notNav?.forEach((el) => el.setAttribute("inert", ""));

        // Focus the close button so that nav can be immediately closed with the enter key without tabbing through the whole menu
        navClose?.focus();
      } else {
        // Reset aria states
        nav?.setAttribute("aria-expanded", "false");
        nav?.setAttribute("aria-hidden", "true");
        // Reset inert attribute
        notNav?.forEach((el) => el.removeAttribute("inert"));
        // Return focus to the nav open button
        navOpen?.focus();
      }
    }
  }
</script>
<style is:global define:vars={{}}>
  #nav-toggle-close,
  #nav-toggle-open {
    display: none;
  }
  @media (max-width: 555px) {
    #nav-toggle-close,
    #nav-toggle-open {
      display: flex;
    }
    #nav-container {
      view-transition-name: nav;
      display: grid;
      grid-template-columns: 1fr 1fr;
      position: fixed;
      width: 100%;
      min-height: 100vh;
      inset-block-start: 0;
      inset-inline-end: 0;
      transform: translateX(50vw);
      transition:
        transform 0.25s ease-out,
        visibility 0s linear 0.25s;
      will-change: transform;
      visibility: hidden;
      z-index: 50;
    }
    nav {
      background-color: #fff;
      padding: 1rem;
      overflow: clip;
    }
    .nav-list {
      list-style-type: none;
      /* transition: transform 0.125s ease-in; */
      margin: 0;
      padding: 0;
      /* transform: translateX(6rem); */
    }

    .nav-level:has(a[aria-selected="true"]) {
      visibility: hidden;
    }
    .nav-list.nav-level {
      position: relative;
      > li > a {
        transform: translateX(0);
        opacity: 1;
      }
    }

    .nav-list {
      > li > a {
        transform: translateX(3rem);
        opacity: 0;
        transition:
          transform 0.25s ease,
          opacity 0.25s ease;
        transition-delay: calc(0.05s * var(--index));
      }
      &[aria-expanded="true"] {
        > li > a {
          transform: translateX(0);
          opacity: 1;
        }
      }
    }

    [aria-selected="true"] + .subnav {
      visibility: visible;

      > .nav-list {
        transform: translateX(0px);
      }
    }
    .nav-list--item {
      display: flex;
      list-style: none;
      padding: 0;

      a {
        flex-grow: 1;
        text-decoration: none;
        padding: 1rem 0;
        border-block-end: 1px solid black;
      }
    }
    .subnav {
      position: absolute;
      inset: 0;
      visibility: hidden;
    }

    #nav-container:has(> #nav[aria-expanded="true"]) {
      transform: translateX(0);
      transition: transform 0.25s ease-in;
      visibility: visible;
    }
    [inert] {
      filter: grayscale(1);
      opacity: 0.5;
      transition: all 0.1s ease-in 0s;
      z-index: 1;
    }
  }
</style>
